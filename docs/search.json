[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About This Site",
    "section": "",
    "text": "Well that’s not right…\nIf you’ve spotted a bug on the website or a discrepancy between my notes and the official course material, please let me know so it can be corrected.\nNote that in the case of a discrepancy, the official course material takes precedence.\n\n\nSource Code\nIf you’re interested, the source code for this website is available here."
  },
  {
    "objectID": "autograder.html",
    "href": "autograder.html",
    "title": "About the Auto Grader",
    "section": "",
    "text": "I’ve implemented an auto grader for the class. This is the first semester it’s been used, and the first time in a statistics class as far as I know, so it is still in beta. The format of providing your answers is different than before, so I’ve provided some examples below."
  },
  {
    "objectID": "autograder.html#simple-example-question",
    "href": "autograder.html#simple-example-question",
    "title": "About the Auto Grader",
    "section": "1. Simple Example Question",
    "text": "1. Simple Example Question\nIn the case of a question with a direct answer, you’ll assign your answer to a variable named after the question number (in this case, answer1).\nObtain the Star Wars characters whose height is greater than 100 cm using the data frame starwars.\n\nanswer1 <- NULL # replace with your answer\nanswer1 <- dplyr::filter(dplyr::starwars, height > 100) # what you'd write"
  },
  {
    "objectID": "autograder.html#example-question-with-subparts",
    "href": "autograder.html#example-question-with-subparts",
    "title": "About the Auto Grader",
    "section": "1.1. Example Question with Subparts",
    "text": "1.1. Example Question with Subparts\nIn cases of questions with subparts, you may be asked to assign your answer to items in a list. Use the $ operator to access and set the answers.\n\nanswer1.1 <- list(\n  a = NULL,\n  b = NULL,\n  c = NULL\n)\n\n\n1.1A: Numeric Persona\nWhat is your favorite number?\n\nanswer1.1$a <- 7\n\n\n\n1.1B: A Lovely Sentence\nWhat is your favorite sentence?\n\nanswer1.1$b <- \"GO BEARS!\"\n\n\n\n1.2C: Animalistic\nWhat is your favorite animal?\n\nanswer1.1$c <- \"bear\""
  },
  {
    "objectID": "autograder.html#example-question-with-a-function",
    "href": "autograder.html#example-question-with-a-function",
    "title": "About the Auto Grader",
    "section": "1.3: Example Question with a Function",
    "text": "1.3: Example Question with a Function\nIn other cases, you’ll be asked to write a function. In that case, just fill in the body of the function.\nWrite a function every_nth that obtains every \\(nth\\) element from a vector for \\(n \\geq 1\\).\n\nevery_nth <- function(v, n) {\n  # Your code here\n  v[c(TRUE, rep(FALSE, n - 1))] # error checking excluded\n}\n\nUh-oh, LeetCode in R?\n\n\nCode\ntwo_sum <- function(nums, target) {\n  num_indices <- new.env() # we use an environment as a hash map\n  for (i in seq_along(nums)) {\n    dif <- as.character(target - nums[i])\n    dif_index <- num_indices[[dif]]\n    if (!is.null(dif_index))\n      return(c(i, dif_index))\n    num_indices[[as.character(nums[i])]] <- i\n  }\n  -1\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Well that’s not right…\nIf you’ve spotted a bug on the website or a discrepancy between my notes and the official course material, please let me know so it can be corrected.\nNote that in the case of a discrepancy, the official course material takes precedence.\n\n\nSource Code\nIf you’re interested, the source code for this website is available here."
  },
  {
    "objectID": "lab-use.html",
    "href": "lab-use.html",
    "title": "Using the Slides",
    "section": "",
    "text": "The keyboard shortcuts available while viewing the slides are provided below. These can also be seen by pressing ?.\n\n\n\nKey\nAction\n\n\n\n\nCTRL + SHIFT + F\nSearch\n\n\n→, ↓, SPACE, N, L, J\nNext slide\n\n\n← , ↑ , P , H , K\nPrevious Slide\n\n\nAlt + ←/↑/→/↓\nNavigate without transitions\n\n\nShift + ←/↑/→/↓\nJump to first/last slide\n\n\nB, ,, .\nPause\n\n\nF\nFullscreen\n\n\nESC, O\nSlide overview\n\n\nE\nPDF export mode\n\n\nM\nToggle menu\n\n\nS\nSpeaker notes view"
  },
  {
    "objectID": "lab01.html#welcome",
    "href": "lab01.html#welcome",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Welcome!",
    "text": "Welcome!\nWelcome to STAT 33B! I’ll be your uGSI, Jakob Sorensen.\n\n\nContact: jakobsorensen@berkeley.edu\nSections:\n\n9 AM - 10 AM and 10 AM - 11 AM in Evans 342\n2 PM - 3 PM and 3 PM - 4 PM in Cory 289\n\nOffice Hours: TBD in Evans 434"
  },
  {
    "objectID": "lab01.html#expectations",
    "href": "lab01.html#expectations",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Expectations",
    "text": "Expectations\nThis is a 1 unit class.\n\n\nWeekly Lab (13 total)\nMonthly Quiz (3 total)\nBiweekly – every 2 weeks – Homework (6 total)\nFinal Exam"
  },
  {
    "objectID": "lab01.html#our-lab",
    "href": "lab01.html#our-lab",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Our Lab",
    "text": "Our Lab\nHere’s the tentative structure for our labs.\n\n\nFor the first 15-20 minutes, I’ll lecture briefly on select topics from the week’s material.\nAfterwards, you are free to work on the lab, and I’m available to help."
  },
  {
    "objectID": "lab01.html#installing-r-and-rstudio",
    "href": "lab01.html#installing-r-and-rstudio",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Installing R and RStudio",
    "text": "Installing R and RStudio\nPlease install R and RStudio now if you haven’t already.\n\nR: https://www.r-project.org/\nRStudio: https://www.rstudio.com/products/rstudio/"
  },
  {
    "objectID": "lab01.html#rstudio-demo",
    "href": "lab01.html#rstudio-demo",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RStudio Demo",
    "text": "RStudio Demo\nSeparate window."
  },
  {
    "objectID": "lab01.html#rmarkdown",
    "href": "lab01.html#rmarkdown",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RMarkdown",
    "text": "RMarkdown\nRMarkdown (.rmd) is file type that allows us to merge,\n\nFormatted written material,\nand R code\n\ninto a single document.\n\n\nThis presentation is using a variant of RMarkdown!"
  },
  {
    "objectID": "lab01.html#this-is-rmarkdown",
    "href": "lab01.html#this-is-rmarkdown",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "This is RMarkdown?",
    "text": "This is RMarkdown?\n\n\n## RMarkdown\n\nRMarkdown (``.rmd``) is file type that allows us to merge,\n\n-   Formatted written material,\n-   and **R** code\n\ninto a single document."
  },
  {
    "objectID": "lab01.html#rmarkdown---basic-formatting",
    "href": "lab01.html#rmarkdown---basic-formatting",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RMarkdown - Basic Formatting",
    "text": "RMarkdown - Basic Formatting\nSoftware like Microsoft Word and Google Docs hides the underlying format representation.\n\n\nIn a markup language, we embed the formatting alongside the text.\n\n\n\nAn Example: HTML (HyperText Markup Language)\n\nThis is <b>bold!</b> But this is merely <i>emphasized!</i>\n\n\n\nAnother Example: LaTeX\n\nThis is \\textbf{bold!} But this is merely \\textit{emphasized!}\n\n\n\nRMarkdown\n\nThis is **bold!** But this is merely _emphasized!_"
  },
  {
    "objectID": "lab01.html#headers",
    "href": "lab01.html#headers",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Headers",
    "text": "Headers\nAren’t headers…\n… just lovely?\n\n\n## Headers\n\n### Aren't headers...\n\n#### ... just lovely?\n\n\n\n\\(N\\) # characters denotes an \\(Nth\\) level header."
  },
  {
    "objectID": "lab01.html#font-face-bold",
    "href": "lab01.html#font-face-bold",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Font Face: Bold",
    "text": "Font Face: Bold\nI’m bold and uncontrolled!\n\n\n## Font Face: **Bold**\n\nI'm **bold** and **uncontrolled!**\n\n\n\nSurrounding text with ** at each end makes it bold."
  },
  {
    "objectID": "lab01.html#font-face-italics",
    "href": "lab01.html#font-face-italics",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Font Face: Italics",
    "text": "Font Face: Italics\nDon’t eat that burger! Don’t eat that burger!\n\n\n## Font Face: _Italics_\n\nDon't eat _that_ burger! Don't _eat_ that burger!\n\n\n\nSurrounding text with _ at each end italicizes it."
  },
  {
    "objectID": "lab01.html#font-face-plain-text-or-code",
    "href": "lab01.html#font-face-plain-text-or-code",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Font Face: Plain Text or Code",
    "text": "Font Face: Plain Text or Code\nThe variable x passed into function main.\n\n\n## Font Face: ``Plain Text or Code``\n\nThe variable ``x`` passed into function ``main``.\n\n\n\nSurrounding text with `` at each end makes it plain text (like code)."
  },
  {
    "objectID": "lab01.html#and-more",
    "href": "lab01.html#and-more",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "And more…",
    "text": "And more…\nWe can also embed lists, tables, images, and many other components!"
  },
  {
    "objectID": "lab01.html#code-chunks",
    "href": "lab01.html#code-chunks",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Code Chunks",
    "text": "Code Chunks\nWe include code in what we call code chunks. A basic example in this document:\n\n\nprint(\"Hello, World!\")\n\n[1] \"Hello, World!\"\n\nx <- 3\ny <- 5\nprint(paste(\"x + y =\", x + y))\n\n[1] \"x + y = 8\"\n\n\n\n\n\nNote that we’ve included the output of our code directly in the document."
  },
  {
    "objectID": "lab01.html#code-chunk-plot-example",
    "href": "lab01.html#code-chunk-plot-example",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Code Chunk: Plot Example",
    "text": "Code Chunk: Plot Example\n\n\nplot(1:10, seq(10, 100, 10), type = \"l\", \n     xlab = \"Time Spent Studying (Hours)\", ylab = \"Quiz Grade (%)\")"
  },
  {
    "objectID": "lab01.html#knitting",
    "href": "lab01.html#knitting",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Knitting",
    "text": "Knitting\nGoing from the plain text format (.rmd) to a presentation format (.pdf, .html) is called knitting the document."
  },
  {
    "objectID": "lab01.html#rmarkdown-demo",
    "href": "lab01.html#rmarkdown-demo",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RMarkdown Demo",
    "text": "RMarkdown Demo\nSeparate window.\n\n\n\n\n\nReturn to Home Page"
  },
  {
    "objectID": "lab02.html#the-crux-of-r",
    "href": "lab02.html#the-crux-of-r",
    "title": "Lab 02: Vectors, Types",
    "section": "The Crux of R",
    "text": "The Crux of R\nMost R code relies heavily on\n\n\nVectors"
  },
  {
    "objectID": "lab02.html#oh-my-taxes",
    "href": "lab02.html#oh-my-taxes",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases."
  },
  {
    "objectID": "lab02.html#oh-my-taxes-1",
    "href": "lab02.html#oh-my-taxes-1",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75"
  },
  {
    "objectID": "lab02.html#oh-my-taxes-2",
    "href": "lab02.html#oh-my-taxes-2",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75\n\nboba_tax <- boba * sales_tax\nbooks_tax <- books * sales_tax\nfood_tax <- food * sales_tax"
  },
  {
    "objectID": "lab02.html#oh-my-taxes-3",
    "href": "lab02.html#oh-my-taxes-3",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75\n\nboba_tax <- boba * sales_tax\nbooks_tax <- books * sales_tax\nfood_tax <- food * sales_tax\n\nsum(boba_tax, books_tax, food_tax)\n\n[1] 8.840625\n\n\n\n\nVery cumbersome…"
  },
  {
    "objectID": "lab02.html#tedius-and-error-prone",
    "href": "lab02.html#tedius-and-error-prone",
    "title": "Lab 02: Vectors, Types",
    "section": "Tedius and Error Prone",
    "text": "Tedius and Error Prone\nWe computed the tax purchase by purchase…\n\n\nBoba Cost\n\n\n*\n\n\nTax Rate\n\n\n=\n\n\nTaxes\n\n\n\n\nBook Cost\n\n\n*\n\n\nTax Rate\n\n\n=\n\n\nTaxes\n\n\n\n\nFood Cost\n\n\n*\n\n\nTax Rate\n\n\n=\n\n\nTaxes"
  },
  {
    "objectID": "lab02.html#an-easier-way",
    "href": "lab02.html#an-easier-way",
    "title": "Lab 02: Vectors, Types",
    "section": "An Easier Way?",
    "text": "An Easier Way?\nWe’d like to do it all at once.\n\n\n\nCosts\n\n\n\n\n*\n\n\n\n\nTax Rate\n\n\n\n\n=\n\n\n\n\nTaxes\n\n\n\n\n… where Costs contains all individual purchase costs, and Taxes contains all individual taxes.\n\nFor this, R provides vectors."
  },
  {
    "objectID": "lab02.html#vector",
    "href": "lab02.html#vector",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector",
    "text": "Vector\nA contiguous array of 1 or more objects, where all objects are the same type."
  },
  {
    "objectID": "lab02.html#aside-type",
    "href": "lab02.html#aside-type",
    "title": "Lab 02: Vectors, Types",
    "section": "Aside: Type?",
    "text": "Aside: Type?\nOur values are ultimately bits in our computer. How does our program know how to interpret these bits?\n\n\nBy assigning a type to the value!\n\n\n\nWe may wants the bits to be interpreted as\n\nintegers\nreal numbers\ntext (strings)\nlogical values (true or false?)\n\n… or something else."
  },
  {
    "objectID": "lab02.html#types-rs-responsibility",
    "href": "lab02.html#types-rs-responsibility",
    "title": "Lab 02: Vectors, Types",
    "section": "Types: R’s Responsibility",
    "text": "Types: R’s Responsibility\nTo make sense of the bits…\n\n\nProgramming languages are responsible for keeping track of the types assigned to each variable.\n\n\n\nSome languages1 are statically typed, which means types are explicit and unchanging (usually).\nAn Example: C++\n\nint x = 3;\nint y = 7;\ndouble z = 0.4;\nstd::string school = \"UC Berkeley\";\nx = \"Berkeley High School\" # ERROR, type changed!\n\n\nC and Java are two other commonly used statically typed languages."
  },
  {
    "objectID": "lab02.html#r-dynamically-typed",
    "href": "lab02.html#r-dynamically-typed",
    "title": "Lab 02: Vectors, Types",
    "section": "R: Dynamically Typed",
    "text": "R: Dynamically Typed\nR is dynamically typed, which means we’re free to modify the type of a variable.\n\nx <- \"Is\"\nx <- 7 \nx <- \"my favorite number?\" \nx <- TRUE\n\n\nNote that R infers the variable’s type for us (in C and Java we’d need to write int x = 71).\n\nModern C++ supports type inference when the auto keyword is used."
  },
  {
    "objectID": "lab02.html#rs-not-so-many-types",
    "href": "lab02.html#rs-not-so-many-types",
    "title": "Lab 02: Vectors, Types",
    "section": "R’s Not-So-Many Types",
    "text": "R’s Not-So-Many Types\nR only has a few types you should be aware of for this class.\n\n\nLogical: TRUE/T or FALSE/F\nInteger: Whole numbers (e.g., 7L, -5L, 0L)1\nDouble: Fractional numbers (e.g., 5.4, -8.3211, 8.0)\nCharacter: Strings (e.g., \"Hello, World!\", \"X\")\n\n\nR will interpret numbers as doubles by default. Append L to the end of a number if you want R to interpret it as an integer."
  },
  {
    "objectID": "lab02.html#querying-type",
    "href": "lab02.html#querying-type",
    "title": "Lab 02: Vectors, Types",
    "section": "Querying Type",
    "text": "Querying Type\nUse the function typeof to get the type of a variable or literal1.\n\n\ntypeof(\"It was you who killed him!\")\n\n[1] \"character\"\n\n\n\n\n\ntypeof(3L)\n\n[1] \"integer\"\n\n\n\n\n\nnoooo <- \"No. I am your father.\"\ntypeof(noooo)\n\n[1] \"character\"\n\n\n\n\n\ntypeof(3.5 + 7L)\n\n[1] \"double\"\n\n\n\nWe call a value we’ve written explicitly in our code a literal."
  },
  {
    "objectID": "lab02.html#modifying-type-casting",
    "href": "lab02.html#modifying-type-casting",
    "title": "Lab 02: Vectors, Types",
    "section": "Modifying Type (Casting)",
    "text": "Modifying Type (Casting)\nCasting is the act of modifying the type of a value.\n\nImplicit\nIn certain contexts, R will cast a value to a different type automatically. We call this an implicit cast.\n\nx <- 3L\ny <- x + 0.5 # 3L cast to a double to complete the operation"
  },
  {
    "objectID": "lab02.html#modifying-type-casting-yourself",
    "href": "lab02.html#modifying-type-casting-yourself",
    "title": "Lab 02: Vectors, Types",
    "section": "Modifying Type (Casting) Yourself",
    "text": "Modifying Type (Casting) Yourself\nCasting is the act of modifying the type of a value.\nExplicit\nCasts you ask R to make explicitly are called explicit casts. Use the as.<type> functions for this.\n\nx <- 1\nas.logical(x)\n\n[1] TRUE\n\nx <- 37.39303\nas.character(x)\n\n[1] \"37.39303\"\n\nas.numeric(x >= 30)\n\n[1] 1"
  },
  {
    "objectID": "lab02.html#did-we-modify-x",
    "href": "lab02.html#did-we-modify-x",
    "title": "Lab 02: Vectors, Types",
    "section": "Did we modify x?",
    "text": "Did we modify x?\nas.<type>(x) returns a new value with the specified type.\n\nx <- 1\ntypeof(x)\n\n[1] \"double\"\n\ntypeof(as.logical(x))\n\n[1] \"logical\"\n\ntypeof(x)  # unchanged!\n\n[1] \"double\"\n\n\n\nTo modify x, reassign x.\n\nx <- as.logical(x)\ntypeof(x)\n\n[1] \"logical\""
  },
  {
    "objectID": "lab02.html#vector-creation",
    "href": "lab02.html#vector-creation",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector: Creation",
    "text": "Vector: Creation\nA contiguous array of 1 or more objects, where all objects are the same type.\n\nCreating Vectors\nUse c (short for combine or concatenate) to create a vector.\n\nx <- c(1, 3, 4, 8, 0, 9, 28, 30, 3)  # type: double\ny <- c(\"Cory\", \"Dwinelle\", \"Evans\")  # type: character\nz <- c(TRUE, FALSE, FALSE, FALSE)    # type: logical\nshort_cut <- 10:100                  # a short cut for 10, 11, ..., 100"
  },
  {
    "objectID": "lab02.html#vector-access",
    "href": "lab02.html#vector-access",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector: Access",
    "text": "Vector: Access\nA contiguous array of 1 or more objects, where all objects are the same type.\nAccessing Elements\nUse <vector>[N] to access the \\(Nth\\) element of a vector.\n\nx[1]  # reference: x <- c(1, 3, 4, 8, 0, 9, 28, 30, 3)\n\n[1] 1\n\ny[2]  # reference: y <- c(\"Cory\", \"Dwinelle\", \"Evans\") \n\n[1] \"Dwinelle\"\n\nz[c(1, 3, 4)]  # reference: z <- c(TRUE, FALSE, FALSE, FALSE)\n\n[1]  TRUE FALSE FALSE\n\n\n\n\nR is not 0-indexed like most programming languages."
  },
  {
    "objectID": "lab02.html#vector-operations",
    "href": "lab02.html#vector-operations",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector: Operations",
    "text": "Vector: Operations\nWe can apply operations to vectors directly, causing the operation to be done to all its elements (vectorization).\n\n\nx <- c(1, 2, 4, 8)\nx * 10  # multiply all elements in x by 10, forming a new vector\n\n[1] 10 20 40 80\n\nx + c(1, 2, 3, 4)  # add two vectors together, component wise \n\n[1]  2  4  7 12\n\n\n\n\nR will recycle values (loop to the start) if the vectors used in the operation aren’t of the same size.\n\nc(0, 1, 2, 3) + c(1, 100)\n\n[1]   1 101   3 103"
  },
  {
    "objectID": "lab02.html#taxes-are-due",
    "href": "lab02.html#taxes-are-due",
    "title": "Lab 02: Vectors, Types",
    "section": "Taxes are Due…",
    "text": "Taxes are Due…\nRecall our taxes code.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75\n\nboba_tax <- boba * sales_tax\nbooks_tax <- books * sales_tax\nfood_tax <- food * sales_tax\n\nsum(boba_tax, books_tax, food_tax)\n\n[1] 8.840625"
  },
  {
    "objectID": "lab02.html#taxes-are-due-now-with-vectors",
    "href": "lab02.html#taxes-are-due-now-with-vectors",
    "title": "Lab 02: Vectors, Types",
    "section": "Taxes are Due… Now with Vectors!",
    "text": "Taxes are Due… Now with Vectors!\n\nsales_tax <- 0.1025\npurchases <- c(7.0, 54.50, 24.75)\ntaxes <- purchases * sales_tax\nsum(taxes)\n\n[1] 8.840625\n\n\n\nGreat! But we’ve lost information. What do the values in purchases represent?\n\n\n\npurchases <- c(boba = 7.0, books = 54.50, food = 24.75)\n\nWe can associate a name with each value in a vector.\n\n\n\npurchases\n\n boba books  food \n 7.00 54.50 24.75"
  },
  {
    "objectID": "lab02.html#access-with-names",
    "href": "lab02.html#access-with-names",
    "title": "Lab 02: Vectors, Types",
    "section": "Access with Names",
    "text": "Access with Names\n\npurchases <- c(boba = 7.0, books = 54.50, food = 24.75)\n\nWe can associate a name with each value in a vector.\n\npurchases\n\n boba books  food \n 7.00 54.50 24.75 \n\n\nAccess is possible with names, <vector>[<element-name>].\n\npurchases[\"boba\"]\n\nboba \n   7 \n\npurchases[c(\"books\", \"food\")]\n\nbooks  food \n54.50 24.75"
  },
  {
    "objectID": "lab02.html#on-forming-vectors",
    "href": "lab02.html#on-forming-vectors",
    "title": "Lab 02: Vectors, Types",
    "section": "On Forming Vectors",
    "text": "On Forming Vectors\nThe c function can concatenate vectors (flatten them).\n\nc(c(1, 2, 3), 4, c(5, 6))\n\n[1] 1 2 3 4 5 6\n\n\n\nWant a vector of \\(N\\) identical values? Use rep!\n\nrep(\"->\", 10)\n\n [1] \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\"\n\n\n\nrep(c(\"->\", \"<-\"), 5)  # also flattens\n\n [1] \"->\" \"<-\" \"->\" \"<-\" \"->\" \"<-\" \"->\" \"<-\" \"->\" \"<-\"\n\n\n\n\nWant a sequence of values from \\(A\\) to \\(B\\) by increments of \\(I\\)? Use seq!\n\nseq(0, 12, 3)   # from 0 (A) to 12 (B) by increments of 2 (I)\n\n[1]  0  3  6  9 12\n\n\n\n\nReturn to Home Page"
  },
  {
    "objectID": "lab03.html#higher-dimensions-by-hand",
    "href": "lab03.html#higher-dimensions-by-hand",
    "title": "Lab 03: Matrices, Lists",
    "section": "Higher Dimensions by Hand!",
    "text": "Higher Dimensions by Hand!\nVectors gave us the ability to form 1 dimensional data.\nIf we desired data in, say, 2 dimensions, we could still use a vector.\n\nx <- 1:100\nrows <- 10\ncols <- 10\n\n# Get the item at row i, column j\ni <- 7\nj <- 5\nx[(i - 1) * cols + j] # Don't try this at home!\n\n[1] 65\n\n\n\n\nWho wants to do that?"
  },
  {
    "objectID": "lab03.html#higher-dimensions-passed-to-r",
    "href": "lab03.html#higher-dimensions-passed-to-r",
    "title": "Lab 03: Matrices, Lists",
    "section": "Higher Dimensions, Passed to R",
    "text": "Higher Dimensions, Passed to R\nThankfully, R has a set of functions that make this easy for us.\n\nx <- matrix(1:100, nrow = 10, ncol = 10)\nx\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11   21   31   41   51   61   71   81    91\n [2,]    2   12   22   32   42   52   62   72   82    92\n [3,]    3   13   23   33   43   53   63   73   83    93\n [4,]    4   14   24   34   44   54   64   74   84    94\n [5,]    5   15   25   35   45   55   65   75   85    95\n [6,]    6   16   26   36   46   56   66   76   86    96\n [7,]    7   17   27   37   47   57   67   77   87    97\n [8,]    8   18   28   38   48   58   68   78   88    98\n [9,]    9   19   29   39   49   59   69   79   89    99\n[10,]   10   20   30   40   50   60   70   80   90   100\n\nx[7, 9] # we can specify the row and column, sep. by a comma\n\n[1] 87"
  },
  {
    "objectID": "lab03.html#row-major-column-major",
    "href": "lab03.html#row-major-column-major",
    "title": "Lab 03: Matrices, Lists",
    "section": "Row-Major, Column-Major",
    "text": "Row-Major, Column-Major\nThe matrix function stores the given vector in column-major order by default. Our previous code assumed row-major order.\n\nTo see what this means, let’s turn m into two matrices, one for each.\n\nm <- 1:9\n\n\n\nRow-Major\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\nColumn-Major\n\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\n\n\n\n\nSo row-major fills in the matrix by row, and column-major does so by column."
  },
  {
    "objectID": "lab03.html#specifying-row-major-column-major",
    "href": "lab03.html#specifying-row-major-column-major",
    "title": "Lab 03: Matrices, Lists",
    "section": "Specifying Row-Major, Column-Major",
    "text": "Specifying Row-Major, Column-Major\nAs said, the default is column-major.\nIf you’d prefer row-major, call matrix with byrow = TRUE.\n\n\n\nRow-Major\n\nmatrix(\n  m, \n  nrow = 3, \n  ncol = 3, \n  byrow = TRUE\n)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n\nColumn-Major\n\nmatrix(\n  m, \n  nrow = 3, \n  ncol = 3\n)\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9"
  },
  {
    "objectID": "lab03.html#matrix-functions-rbind",
    "href": "lab03.html#matrix-functions-rbind",
    "title": "Lab 03: Matrices, Lists",
    "section": "Matrix Functions: rbind",
    "text": "Matrix Functions: rbind\nrbind combines the rows of the inputs into a new matrix.\n\nrbind(1:3, 3:1)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    3    2    1\n\nrbind(matrix(1:6, nrow = 3, ncol = 2), c(-100, 100))\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n[4,] -100  100\n\nrbind(matrix(1:3, nrow = 1, ncol = 3), matrix(9:11, nrow = 1, ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    9   10   11"
  },
  {
    "objectID": "lab03.html#matrix-functions-cbind",
    "href": "lab03.html#matrix-functions-cbind",
    "title": "Lab 03: Matrices, Lists",
    "section": "Matrix Functions: cbind",
    "text": "Matrix Functions: cbind\ncbind combines the columns of the inputs into a new matrix.\n\ncbind(1:3, 3:1)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    2\n[3,]    3    1\n\ncbind(matrix(1:6, nrow = 3, ncol = 2), c(0, 50, 100))\n\n     [,1] [,2] [,3]\n[1,]    1    4    0\n[2,]    2    5   50\n[3,]    3    6  100\n\ncbind(matrix(1:6, nrow = 3, ncol = 2), matrix(6:1, nrow = 3, ncol = 2))\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    6    3\n[2,]    2    5    5    2\n[3,]    3    6    4    1"
  },
  {
    "objectID": "lab03.html#matrix-functions-nrow-ncol",
    "href": "lab03.html#matrix-functions-nrow-ncol",
    "title": "Lab 03: Matrices, Lists",
    "section": "Matrix Functions: nrow, ncol",
    "text": "Matrix Functions: nrow, ncol\nWith vectors, we use length to obtain the number of objects. Similarly, for matrices:\n\nTo obtain the number of rows, use nrow:\n\nnrow(matrix(1:20, nrow = 5, ncol = 4))\n\n[1] 5\n\n\n\n\nTo obtain the number of columns, use ncol:\n\nncol(matrix(1:20, nrow = 5, ncol = 4))\n\n[1] 4"
  },
  {
    "objectID": "lab03.html#accessing-elements",
    "href": "lab03.html#accessing-elements",
    "title": "Lab 03: Matrices, Lists",
    "section": "Accessing Elements",
    "text": "Accessing Elements\nUse <matrix>[i, j] to get the value at the ith row and jth column.\n\nx[2, 4]\n\n[1] 32\n\n\n\nIf you want the ith row, use <matrix>[i,].\n\nx[2,]\n\n [1]  2 12 22 32 42 52 62 72 82 92\n\n\n\n\nSimilarly, if you want the jth column, use <matrix>[,j].\n\nx[,4]\n\n [1] 31 32 33 34 35 36 37 38 39 40\n\n\n\n\nNote that a vector is returned in each case."
  },
  {
    "objectID": "lab03.html#lists",
    "href": "lab03.html#lists",
    "title": "Lab 03: Matrices, Lists",
    "section": "Lists",
    "text": "Lists\nLists allow us to store collection of objects, as with vectors, except every object need not be the same type.\n\nlist(1:7, \"Go Bears!\", TRUE)\n\n[[1]]\n[1] 1 2 3 4 5 6 7\n\n[[2]]\n[1] \"Go Bears!\"\n\n[[3]]\n[1] TRUE\n\n\n\nAlso, the objects of a list need not be atomic types. As you can see, the first object above is a vector. We can even have lists of lists.\n\nlist(list(1:7, \"Go Bears!\", TRUE), list(7:1, \"!sraeB oG\", FALSE))"
  },
  {
    "objectID": "lab03.html#lists-names",
    "href": "lab03.html#lists-names",
    "title": "Lab 03: Matrices, Lists",
    "section": "Lists: Names",
    "text": "Lists: Names\nWe can assign names to the objects.\n\nmy_list = list(nums = 1:7, str = \"Go Bears!\", bool = TRUE)\nmy_list\n\n$nums\n[1] 1 2 3 4 5 6 7\n\n$str\n[1] \"Go Bears!\"\n\n$bool\n[1] TRUE"
  },
  {
    "objectID": "lab03.html#lists-access-by-name",
    "href": "lab03.html#lists-access-by-name",
    "title": "Lab 03: Matrices, Lists",
    "section": "Lists: Access by Name",
    "text": "Lists: Access by Name\nThen access the objects by name with the $ operator.\n\nmy_list$nums\n\n[1] 1 2 3 4 5 6 7\n\nmy_list$str\n\n[1] \"Go Bears!\"\n\nmy_list$bool\n\n[1] TRUE"
  },
  {
    "objectID": "lab03.html#lists-access-with-square-brackets",
    "href": "lab03.html#lists-access-with-square-brackets",
    "title": "Lab 03: Matrices, Lists",
    "section": "Lists: Access with Square Brackets",
    "text": "Lists: Access with Square Brackets\nAs with vectors, we can access a list’s objects with indices, logical values, or names using square brackets.\n\n\nBe careful! There are two types of access with lists.\n\n\n\n\nperson <- list(name = \"Franz Liszt\", profession = \"Pianist\", alive = FALSE)\n\n\n\nWhat is the difference between these two?\n\nperson[1]\n\n$name\n[1] \"Franz Liszt\"\n\nperson[[1]]\n\n[1] \"Franz Liszt\""
  },
  {
    "objectID": "lab03.html#list-square-brackets-two-methods",
    "href": "lab03.html#list-square-brackets-two-methods",
    "title": "Lab 03: Matrices, Lists",
    "section": "List: Square Brackets, Two Methods?",
    "text": "List: Square Brackets, Two Methods?\n\nperson[1]\n\n$name\n[1] \"Franz Liszt\"\n\n\nThe first (one set of square brackets) returns a list with only the first object.\n\n\nperson[[1]]\n\n[1] \"Franz Liszt\"\n\n\nThe second (two sets of square brackets) returns the underlying object (a string)."
  },
  {
    "objectID": "lab03.html#lists-only-one",
    "href": "lab03.html#lists-only-one",
    "title": "Lab 03: Matrices, Lists",
    "section": "Lists: Only One!",
    "text": "Lists: Only One!\nNote that when using double square brackets [[]], you can only access one object at a time.\n\n\nperson[[c(1, 2)]]\n\nError in person[[c(1, 2)]]: subscript out of bounds\n\n\n\n\nThis isn’t an issue with single square brackets.\n\nperson[c(1, 2)]\n\n$name\n[1] \"Franz Liszt\"\n\n$profession\n[1] \"Pianist\"\n\n\n\n\nCan you guess why?\n\n\n\n\nReturn to Home Page"
  },
  {
    "objectID": "lab04.html#tables",
    "href": "lab04.html#tables",
    "title": "Lab 04: Data Frames",
    "section": "Tables",
    "text": "Tables\nYou likely use spreadsheet software (Excel, Google Sheets, LibreOffice) to deal with tables.\n\nYou define some named columns, and include data on each row.\n\n\n\nA\nB\nC\n\n\n\n\n1\n2\n3\n\n\n4\n5\n6\n\n\n7\n8\n9\n\n\n\n\n\nFor this, R provides data frames."
  },
  {
    "objectID": "lab04.html#data-frames-lists-of-vectors",
    "href": "lab04.html#data-frames-lists-of-vectors",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: Lists of Vectors",
    "text": "Data Frames: Lists of Vectors\nTo start, a data frame is a list of vectors.\n\n\nlist(\n  1:10,\n  c(\"apple\", \"orange\", \"banana\"),\n  rep(c(TRUE, FALSE, FALSE), 4)\n)\n\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n[1] \"apple\"  \"orange\" \"banana\"\n\n[[3]]\n [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE\n\n\n\n\nIs this a data frame?"
  },
  {
    "objectID": "lab04.html#data-frames-additional-constraints",
    "href": "lab04.html#data-frames-additional-constraints",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: Additional Constraints",
    "text": "Data Frames: Additional Constraints\nAdditionally, the vectors must all be the same size.\n\n\nlist(\n  1:10,\n  rep(\"apple\", 10),\n  rep(c(TRUE, FALSE), 5)\n)\n\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n [1] \"apple\" \"apple\" \"apple\" \"apple\" \"apple\" \"apple\" \"apple\" \"apple\" \"apple\"\n[10] \"apple\"\n\n[[3]]\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE"
  },
  {
    "objectID": "lab04.html#data-frames-attributes",
    "href": "lab04.html#data-frames-attributes",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: Attributes",
    "text": "Data Frames: Attributes\nData frames also have some important attributes:\n\ncolumn names, queried with names() or colnames()\nrow names, queried with row.names()\n\n\nUse nrow and ncol to get the number of rows and columns, respectively, as with matrices."
  },
  {
    "objectID": "lab04.html#data-frames-creation",
    "href": "lab04.html#data-frames-creation",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: Creation",
    "text": "Data Frames: Creation\nUse data.frame() to create a data frame.\n\nfood <- data.frame(\n  name = c(\"orange\", \"bok choy\", \"strawberry\"),\n  category = c(\"fruit\", \"vegetable\", \"fruit\"),\n  num_available = c(35, 20, 12)\n)\nfood\n\n        name  category num_available\n1     orange     fruit            35\n2   bok choy vegetable            20\n3 strawberry     fruit            12"
  },
  {
    "objectID": "lab04.html#data-frames-access",
    "href": "lab04.html#data-frames-access",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: Access",
    "text": "Data Frames: Access\n\nAccess is similar to matrices. Pass in vectors of indices, logical values, or names (strings)."
  },
  {
    "objectID": "lab04.html#data-frames-access---single-elements",
    "href": "lab04.html#data-frames-access---single-elements",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: Access - Single Elements",
    "text": "Data Frames: Access - Single Elements\nUsing the data frame…\n\nfood\n\n        name  category num_available\n1     orange     fruit            35\n2   bok choy vegetable            20\n3 strawberry     fruit            12\n\n\nHow do we access the object at the 1st row, 2nd column?\n\n\nfood[1, 2]\n\n[1] \"fruit\""
  },
  {
    "objectID": "lab04.html#data-frames-access---rows-columns",
    "href": "lab04.html#data-frames-access---rows-columns",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: Access - Rows, Columns",
    "text": "Data Frames: Access - Rows, Columns\nUsing the data frame…\n\nfood\n\n        name  category num_available\n1     orange     fruit            35\n2   bok choy vegetable            20\n3 strawberry     fruit            12\n\n\nHow do we access the first and second rows?\n\n\nfood[1:2,]\n\n      name  category num_available\n1   orange     fruit            35\n2 bok choy vegetable            20\n\n\n\n\nHow do we access the third column?\n\n\n\nfood[,3]\n\n[1] 35 20 12"
  },
  {
    "objectID": "lab04.html#data-frames-more-access-examples",
    "href": "lab04.html#data-frames-more-access-examples",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: More Access Examples",
    "text": "Data Frames: More Access Examples\nMore examples:\n\nfood[,c(\"name\", \"category\")]\n\n        name  category\n1     orange     fruit\n2   bok choy vegetable\n3 strawberry     fruit\n\nfood[food$num_available >= 20,]\n\n      name  category num_available\n1   orange     fruit            35\n2 bok choy vegetable            20\n\nfood[, \"category\"]\n\n[1] \"fruit\"     \"vegetable\" \"fruit\"    \n\n\n\n\nDid you notice something?\n\n\n\nIf we access a single column, we get a vector. Otherwise, we get a data frame."
  },
  {
    "objectID": "lab04.html#data-frames-operator",
    "href": "lab04.html#data-frames-operator",
    "title": "Lab 04: Data Frames",
    "section": "Data Frames: $ Operator",
    "text": "Data Frames: $ Operator\nAs data frames are lists, you can access its vectors with the $ operator.\n\n\nfood$name\n\n[1] \"orange\"     \"bok choy\"   \"strawberry\"\n\nfood$category\n\n[1] \"fruit\"     \"vegetable\" \"fruit\"    \n\nfood$num_available\n\n[1] 35 20 12\n\n\n\n\nWe can add new columns using the $ operator.\n\nfood$for_sale <- c(TRUE, FALSE, FALSE)\nfood\n\n        name  category num_available for_sale\n1     orange     fruit            35     TRUE\n2   bok choy vegetable            20    FALSE\n3 strawberry     fruit            12    FALSE"
  },
  {
    "objectID": "lab04.html#helpful-functions-head-tail",
    "href": "lab04.html#helpful-functions-head-tail",
    "title": "Lab 04: Data Frames",
    "section": "Helpful Functions: head, tail",
    "text": "Helpful Functions: head, tail\nTo see the first or last n rows, use head() or tail(), respectively. n defaults to 6.\n\n\n\n\n\n\n\n\n\n\nhead(df)\n\n  x y\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n\nhead(df, n = 3)\n\n  x y\n1 1 1\n2 2 2\n3 3 3\n\n\n\n\ntail(df)\n\n      x   y\n95   95  95\n96   96  96\n97   97  97\n98   98  98\n99   99  99\n100 100 100\n\ntail(df, n = 3)\n\n      x   y\n98   98  98\n99   99  99\n100 100 100"
  },
  {
    "objectID": "lab04.html#missing-values",
    "href": "lab04.html#missing-values",
    "title": "Lab 04: Data Frames",
    "section": "Missing Values",
    "text": "Missing Values\nAs our vectors have to be the same size, how do we simulate empty cells in a table?\nWe use a special data type, NA (“Not Available”).\n\n\ndata.frame(\n  names = c(\"Bob the Builder\", \"Spongebob\", \"Darth Vader\"),\n  major = c(\"Civil Engineering\", \"Culinary Studies\", NA),\n  age   = c(32, NA, 44)\n)\n\n            names             major age\n1 Bob the Builder Civil Engineering  32\n2       Spongebob  Culinary Studies  NA\n3     Darth Vader              <NA>  44\n\n\n\nNote that we can freely combine this special type with any other type in a vector.\n\n\n\nReturn to Home Page"
  },
  {
    "objectID": "practice/algorithmic-problems.html",
    "href": "practice/algorithmic-problems.html",
    "title": "Algorithmic Problems",
    "section": "",
    "text": "This page consists of algorithmic problems implemented in R, for fun and an extra challenge. Nothing here is in scope for STAT 33B. If you think you’ve solved some fun problem successfully in R, please send it to me! I’d be happy to include it here for others to see.\nIf you’re looking for problems to solve, I’d recommend Codeforces or LeetCode. Unfortunately, neither has R support. For this, I’d recommend CodeChef."
  },
  {
    "objectID": "practice/algorithmic-problems.html#two-sum",
    "href": "practice/algorithmic-problems.html#two-sum",
    "title": "Algorithmic Problems",
    "section": "Two Sum",
    "text": "Two Sum\nTo start, the most popular problem on LeetCode! Click here to read the problem.\n\ntwo_sum <- function(nums, target) {\n  # Your code here\n}\n\n\n\nShow Solution\ntwo_sum <- function(nums, target) {\n  num_indices <- new.env() # we use an environment as a hash map\n  for (i in seq_along(nums)) {\n    dif <- as.character(target - nums[i])\n    dif_index <- num_indices[[dif]]\n    if (!is.null(dif_index))\n      return(c(i, dif_index))\n    num_indices[[as.character(nums[i])]] <- i\n  }\n  -1\n}"
  },
  {
    "objectID": "practice/algorithmic-problems.html#qaq",
    "href": "practice/algorithmic-problems.html#qaq",
    "title": "Algorithmic Problems",
    "section": "QAQ",
    "text": "QAQ\nThis one from Codeforces has a strange problem statement, but it’s a good exercise in using prefix arrays. Click here to read the problem.\n\nqaq <- function(string) {\n  # Your code here\n}\n\nI’ve provided two solutions. The first uses for/if and is more typical of what you’d see in other languages (and is maybe easier for you to read). The second is a R’ified version that doesn’t use for/if, instead relying on vectorization and functional programming.\n\n\nShow for/if Solution\nqaq <- function(string) {\n  # Form a prefix vector for the number of \"Q\"s at each index.\n  q_count <- numeric(nchar(string))\n  for (i in 1:nchar(string)) {\n    is_q <- as.integer(substr(string, i, i) == \"Q\")\n    q_count[i] <- ifelse(i > 1, q_count[i - 1] + is_q, is_q)\n  }\n  \n  # For each \"A\" we can form <\"Q\"s before \"A\"> * <\"Q\"s after \"A\"> \"QAQ\"s. We \n  # obtain this value for each \"A\" and sum them.  \n  count <- 0\n  for (i in 1:nchar(string)) {\n    if (substr(string, i, i) == \"A\") {\n      q_before = q_count[i]\n      q_after = tail(q_count, 1) - q_count[i]\n      count <- count + q_before * q_after\n    }\n  }\n  count\n}\n\n\n\n\nShow R’ified Solution\nqaq <- function(string) {\n  # We'll be using these three packages.\n  require(magrittr, stringr, purrr)\n  \n  # Obtain the individual characters in `string`.\n  characters <- 1:nchar(string) %>%\n    str_sub(string, ., .)\n  \n  # Form a prefix vector for the number of \"Q\"s at each index.\n  q_count <- characters %>% \n    equals(\"Q\") %>%\n    as.numeric() %>%\n    accumulate(`+`)\n  \n  # For each \"A\" we can form <\"Q\"s before \"A\"> * <\"Q\"s after \"A\"> \"QAQ\"s. We \n  # obtain this value for each \"A\" and sum them.\n  characters %>%\n    equals(\"A\") %>%\n    multiply_by(q_count) %>%\n    multiply_by(tail(q_count, 1) - q_count) %>%\n    sum()\n}\n\n\nThis page is in progress. Contributions are welcome."
  },
  {
    "objectID": "practice/practice-vector.html",
    "href": "practice/practice-vector.html",
    "title": "Vector Introduction",
    "section": "",
    "text": "This page is a collection of practice problems related to vectors, particularly vector subsetting and vectorization. The purpose here is to practice these concepts, so do not use control statements (if/else/for/while).\nDo not worry about error checking for these problems. That is, assume the user of your function has passed in valid arguments."
  },
  {
    "objectID": "practice/practice-vector.html#intervals",
    "href": "practice/practice-vector.html#intervals",
    "title": "Vector Introduction",
    "section": "1. Intervals",
    "text": "1. Intervals\nWrite a function that returns every \\(n\\)th element from a vector (\\(n \\geq 1\\)).\n\nevery_nth <- function(v, n) {\n  # Your code here\n}\n\n\n\nShow Solution\nevery_nth <- function(v, n) {\n  v[c(TRUE, rep(FALSE, n - 1))] \n}\n\n# Alternate Solution\nevery_nth <- function(v, n) {\n  v[seq(1, length(v), n)]\n}\n\n\nNow write a function that sets every \\(n\\)th element of a vector to the maximum value in the vector. The rest should be set to the minimum.\n\nnth_minmax_modification <- function(v, n) {\n  # Your code here\n}\n\n\n\nShow Solution\nnth_minmax_modification <- function(v, n) {\n  largest <- max(v)\n  smallest <- min(v)\n  pattern <- c(TRUE, rep(FALSE, n - 1))\n  v[pattern] <- largest\n  v[!pattern] <- smallest\n  v\n}"
  },
  {
    "objectID": "practice/practice-vector.html#inclusion-exclusion",
    "href": "practice/practice-vector.html#inclusion-exclusion",
    "title": "Vector Introduction",
    "section": "2. Inclusion, Exclusion",
    "text": "2. Inclusion, Exclusion\nWrite a function that returns a vector that excludes all elements equal to some specified value, to_exclude.\n\nexclude <- function(v, to_exclude) {\n  # Your code here\n}\n\n\n\nShow Solution\nexclude <- function(v, to_exclude) {\n  v[v != to_exclude]\n}\n\n\nNow write a function that returns a vector that excludes all elements equal to any of the elements in the vector to_exclude.\nHint: you may find the %in% operator helpful.\n\nexclude <- function(v, to_exclude) {\n  # Your code here\n}\n\n\n\nShow Solution\nexclude <- function(v, to_exclude) {\n  v[!(v %in% to_exclude)]\n}\n# Q: Does this solution also work for the previous question?\n\n\nNow do the same, but this time include only the elements equal to any of the elements in the vector to_include.\n\ninclude <- function(v, to_include) {\n  # Your code here\n}\n\n\n\nShow Solution\ninclude <- function(v, to_include) {\n  v[v %in% to_include]\n}"
  },
  {
    "objectID": "practice/practice-vector.html#palindrome",
    "href": "practice/practice-vector.html#palindrome",
    "title": "Vector Introduction",
    "section": "3. Palindrome",
    "text": "3. Palindrome\nA palindrome is a sequence that is read the same forwards and backwards. Return whether a specified vector is a palindrome.\n\nis_palindrome <- function(v) {\n  # Your code here\n}\n\n\n\nShow Solution\nis_palindrome <- function(v) {\n  all(rev(v) == v)\n}\n\n# If you didn't know about the `all` function, you could have used `sum`.\n\nis_palindrome <- function(v) {\n  sum(rev(v) == v) == length(v)\n}\n\n# Alternate Solution\nis_palindrome <- function(v) {\n  mid_index <- length(v) / 2\n  all(v[1:mid_index] == v[length(v):(mid_index + 1)])\n}\n\n# Did you spot the implicit cast? It may be better to be explicit.\nis_palindrome <- function(v) {\n  mid_index <- as.integer(length(v) / 2)\n  all(v[1:mid_index] == v[length(v):(mid_index + 1)])\n}\n\n# I've made an explicit cast now, but this isn't where the implicit cast occurred.\n# Q: Where did it occur?\n\n\nNow write a function that checks if a vector is a palindrome, or could be turned into a palindrome with at most n modifications. The only valid modification is changing an existing value to a different value.\n\nis_palindrome_or_close <- function(v, n) {\n  # Your code here\n}\n\n\n\nShow Solution\nis_palindrome_or_close <- function(v, n) {\n  mid_index <- length(v) / 2\n  invalid_count <- sum(v[1:mid_index] != v[length(v):(mid_index + 1)])\n  invalid_count <= n\n}"
  },
  {
    "objectID": "practice/practice-vector.html#roman-numerals",
    "href": "practice/practice-vector.html#roman-numerals",
    "title": "Vector Introduction",
    "section": "4. Roman Numerals",
    "text": "4. Roman Numerals\nWrite a function that takes a vector v of numbers and returns a vector where each number in v has been converted to its roman numeral equivalent.\n\n\n\nNumber\nRoman Numeral\n\n\n\n\n1\nI\n\n\n2\nII\n\n\n3\nIII\n\n\n4\nIV\n\n\n5\nV\n\n\n6\nVI\n\n\n7\nVII\n\n\n8\nVIII\n\n\n9\nIX\n\n\n10\nX\n\n\n\n\nto_roman <- function(v) {\n  # Your code here\n}\n\n\n\nShow Solution\nto_roman <- function(v) {\n  ref <- c(\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\")\n  ref[v]\n}"
  },
  {
    "objectID": "practice/practice-vector.html#unit-conversion",
    "href": "practice/practice-vector.html#unit-conversion",
    "title": "Vector Introduction",
    "section": "5. Unit Conversion",
    "text": "5. Unit Conversion\nWrite a function that converts a vector of inches to centimeters. Note that 1 inches is equivalent to 2.54 centimeters.\n\ninches_to_cm <- function(inches) {\n  # Your code here\n}\n\n\n\nShow Solution\ninches_to_cm <- function(inches) {\n  inches * 2.54\n}\n\n\nWrite a function that converts a vector of temperatures from Fahrenheit to Celsius. The conversion formula is\n\\[^{\\circ}C = \\frac{^{\\circ}F - 32}{1.8}.\\]\n\nfahrenheit_to_celsius <- function(fahrenheit) {\n  # Your code here\n}\n\n\n\nShow Solution\nfahrenheit_to_celsius <- function(fahrenheit) {\n  (fahrenheit - 32) / 1.8\n}"
  },
  {
    "objectID": "practice/practice-vector.html#ranges",
    "href": "practice/practice-vector.html#ranges",
    "title": "Vector Introduction",
    "section": "6. Ranges",
    "text": "6. Ranges\nWrite a function that removes all values outside of the given range (inclusive).\n\nin_range <- function(v, min, max) {\n  # Your code here\n}\n\n\n\nShow Solution\nin_range <- function(v, min, max) {\n  v[v >= min & v <= max]\n}\n\n\nNow write a function that turns all values strictly outside the range into replacement.\n\nreplace_outside_range <- function(v, min, max, replacement) {\n  # Your code here\n}\n\n\n\nShow Solution\nreplace_outside_range <- function(v, min, max, replacement) {\n  v[v < min | v > max] <- replacement\n  v\n}\n\n\nNow write a function that instead brings all values into the range. If a value is less than min, it should be set to min. If a value is greater than max, it should be set to max.\n\nrestrict_to_range <- function(v, min, max) {\n  # Your code here\n}\n\n\n\nShow Solution\nrestrict_to_range <- function(v, min, max) {\n  v[v < min] <- min\n  v[v > max] <- max\n  v\n}"
  },
  {
    "objectID": "times.html",
    "href": "times.html",
    "title": "Office Hours/Lab Sections",
    "section": "",
    "text": "My Office Hours\n\nThursdays, 10 a.m. to 11 a.m. via Zoom1\nFridays, 11 a.m. to 12 p.m. and 4 p.m. to 6 p.m. in Evans 434\n\n\n\nMy Lab Sections\n\nFridays, 9 a.m. to 10 a.m. and 10 a.m. to 11 a.m. in Evans 342\nFridays, 2 p.m. to 3 p.m. and 3 p.m. to 4 p.m. in Cory 289\n\n\n\nJoy’s Office Hours (Tutor)\n\nMondays, 2 p.m. to 5 p.m. in Evans 434\nWednesdays, 8 a.m. to 10 a.m. in Evans 432\nFridays, 8 a.m. to 10 a.m. and 5 p.m. to 6 p.m. in Evans 434\n\n\n\n\n\n\nFootnotes\n\n\nYou must be logged into your UC Berkeley associated Zoom account to access the meeting.↩︎"
  }
]