[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About This Site",
    "section": "",
    "text": "Well that’s not right…\nIf you’ve spotted a bug on the website or a discrepancy between my notes and the official course material, please let me know so it can be corrected.\nNote that in the case of a discrepancy, the official course material takes precedence.\n\n\nSource Code\nIf you’re interested, the source code for this website is available here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Well that’s not right…\nIf you’ve spotted a bug on the website or a discrepancy between my notes and the official course material, please let me know so it can be corrected.\nNote that in the case of a discrepancy, the official course material takes precedence.\n\n\nSource Code\nIf you’re interested, the source code for this website is available here."
  },
  {
    "objectID": "lab-use.html",
    "href": "lab-use.html",
    "title": "Using the Slides",
    "section": "",
    "text": "The keyboard shortcuts available while viewing the slides are provided below. These can also be seen by pressing ?.\n\n\n\nKey\nAction\n\n\n\n\nCTRL + SHIFT + F\nSearch\n\n\n→, ↓, SPACE, N, L, J\nNext slide\n\n\n← , ↑ , P , H , K\nPrevious Slide\n\n\nAlt + ←/↑/→/↓\nNavigate without transitions\n\n\nShift + ←/↑/→/↓\nJump to first/last slide\n\n\nB, ,, .\nPause\n\n\nF\nFullscreen\n\n\nESC, O\nSlide overview\n\n\nE\nPDF export mode\n\n\nM\nToggle menu\n\n\nS\nSpeaker notes view"
  },
  {
    "objectID": "lab01.html#welcome",
    "href": "lab01.html#welcome",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Welcome!",
    "text": "Welcome!\nWelcome to STAT 33B! I’ll be your uGSI, Jakob Sorensen.\n\n\nContact: jakobsorensen@berkeley.edu\nSections:\n\n9 AM - 10 AM and 10 AM - 11 AM in Evans 342\n2 PM - 3 PM and 3 PM - 4 PM in Cory 289\n\nOffice Hours: TBD in Evans 434"
  },
  {
    "objectID": "lab01.html#expectations",
    "href": "lab01.html#expectations",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Expectations",
    "text": "Expectations\nThis is a 1 unit class.\n\n\nWeekly Lab (13 total)\nMonthly Quiz (3 total)\nBiweekly – every 2 weeks – Homework (6 total)\nFinal Exam"
  },
  {
    "objectID": "lab01.html#our-lab",
    "href": "lab01.html#our-lab",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Our Lab",
    "text": "Our Lab\nHere’s the tentative structure for our labs.\n\n\nFor the first 15-20 minutes, I’ll lecture briefly on select topics from the week’s material.\nAfterwards, you are free to work on the lab, and I’m available to help."
  },
  {
    "objectID": "lab01.html#installing-r-and-rstudio",
    "href": "lab01.html#installing-r-and-rstudio",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Installing R and RStudio",
    "text": "Installing R and RStudio\nPlease install R and RStudio now if you haven’t already.\n\nR: https://www.r-project.org/\nRStudio: https://www.rstudio.com/products/rstudio/"
  },
  {
    "objectID": "lab01.html#rstudio-demo",
    "href": "lab01.html#rstudio-demo",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RStudio Demo",
    "text": "RStudio Demo\nSeparate window."
  },
  {
    "objectID": "lab01.html#rmarkdown",
    "href": "lab01.html#rmarkdown",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RMarkdown",
    "text": "RMarkdown\nRMarkdown (.rmd) is file type that allows us to merge,\n\nFormatted written material,\nand R code\n\ninto a single document.\n\n\nThis presentation is using a variant of RMarkdown!"
  },
  {
    "objectID": "lab01.html#this-is-rmarkdown",
    "href": "lab01.html#this-is-rmarkdown",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "This is RMarkdown?",
    "text": "This is RMarkdown?\n\n\n## RMarkdown\n\nRMarkdown (``.rmd``) is file type that allows us to merge,\n\n-   Formatted written material,\n-   and **R** code\n\ninto a single document."
  },
  {
    "objectID": "lab01.html#rmarkdown---basic-formatting",
    "href": "lab01.html#rmarkdown---basic-formatting",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RMarkdown - Basic Formatting",
    "text": "RMarkdown - Basic Formatting\nSoftware like Microsoft Word and Google Docs hides the underlying format representation.\n\n\nIn a markup language, we embed the formatting alongside the text.\n\n\n\nAn Example: HTML (HyperText Markup Language)\n\nThis is <b>bold!</b> But this is merely <i>emphasized!</i>\n\n\n\nAnother Example: LaTeX\n\nThis is \\textbf{bold!} But this is merely \\textit{emphasized!}\n\n\n\nRMarkdown\n\nThis is **bold!** But this is merely _emphasized!_"
  },
  {
    "objectID": "lab01.html#headers",
    "href": "lab01.html#headers",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Headers",
    "text": "Headers\nAren’t headers…\n… just lovely?\n\n\n## Headers\n\n### Aren't headers...\n\n#### ... just lovely?\n\n\n\n\\(N\\) # characters denotes an \\(Nth\\) level header."
  },
  {
    "objectID": "lab01.html#font-face-bold",
    "href": "lab01.html#font-face-bold",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Font Face: Bold",
    "text": "Font Face: Bold\nI’m bold and uncontrolled!\n\n\n## Font Face: **Bold**\n\nI'm **bold** and **uncontrolled!**\n\n\n\nSurrounding text with ** at each end makes it bold."
  },
  {
    "objectID": "lab01.html#font-face-italics",
    "href": "lab01.html#font-face-italics",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Font Face: Italics",
    "text": "Font Face: Italics\nDon’t eat that burger! Don’t eat that burger!\n\n\n## Font Face: _Italics_\n\nDon't eat _that_ burger! Don't _eat_ that burger!\n\n\n\nSurrounding text with _ at each end italicizes it."
  },
  {
    "objectID": "lab01.html#font-face-plain-text-or-code",
    "href": "lab01.html#font-face-plain-text-or-code",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Font Face: Plain Text or Code",
    "text": "Font Face: Plain Text or Code\nThe variable x passed into function main.\n\n\n## Font Face: ``Plain Text or Code``\n\nThe variable ``x`` passed into function ``main``.\n\n\n\nSurrounding text with `` at each end makes it plain text (like code)."
  },
  {
    "objectID": "lab01.html#and-more",
    "href": "lab01.html#and-more",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "And more…",
    "text": "And more…\nWe can also embed lists, tables, images, and many other components!"
  },
  {
    "objectID": "lab01.html#code-chunks",
    "href": "lab01.html#code-chunks",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Code Chunks",
    "text": "Code Chunks\nWe include code in what we call code chunks. A basic example in this document:\n\n\nprint(\"Hello, World!\")\n\n[1] \"Hello, World!\"\n\nx <- 3\ny <- 5\nprint(paste(\"x + y =\", x + y))\n\n[1] \"x + y = 8\"\n\n\n\n\n\nNote that we’ve included the output of our code directly in the document."
  },
  {
    "objectID": "lab01.html#code-chunk-plot-example",
    "href": "lab01.html#code-chunk-plot-example",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Code Chunk: Plot Example",
    "text": "Code Chunk: Plot Example\n\n\nplot(1:10, seq(10, 100, 10), type = \"l\", \n     xlab = \"Time Spent Studying (Hours)\", ylab = \"Quiz Grade (%)\")"
  },
  {
    "objectID": "lab01.html#knitting",
    "href": "lab01.html#knitting",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "Knitting",
    "text": "Knitting\nGoing from the plain text format (.rmd) to a presentation format (.pdf, .html) is called knitting the document."
  },
  {
    "objectID": "lab01.html#rmarkdown-demo",
    "href": "lab01.html#rmarkdown-demo",
    "title": "Lab 01: Setup, RMarkdown",
    "section": "RMarkdown Demo",
    "text": "RMarkdown Demo\nSeparate window.\n\n\n\n\n\nReturn to Home Page"
  },
  {
    "objectID": "lab02.html#the-crux-of-r",
    "href": "lab02.html#the-crux-of-r",
    "title": "Lab 02: Vectors, Types",
    "section": "The Crux of R",
    "text": "The Crux of R\nMost R code relies heavily on\n\n\nVectors"
  },
  {
    "objectID": "lab02.html#oh-my-taxes",
    "href": "lab02.html#oh-my-taxes",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases."
  },
  {
    "objectID": "lab02.html#oh-my-taxes-1",
    "href": "lab02.html#oh-my-taxes-1",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75"
  },
  {
    "objectID": "lab02.html#oh-my-taxes-2",
    "href": "lab02.html#oh-my-taxes-2",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75\n\nboba_tax <- boba * sales_tax\nbooks_tax <- books * sales_tax\nfood_tax <- food * sales_tax"
  },
  {
    "objectID": "lab02.html#oh-my-taxes-3",
    "href": "lab02.html#oh-my-taxes-3",
    "title": "Lab 02: Vectors, Types",
    "section": "Oh my taxes!",
    "text": "Oh my taxes!\nSuppose we’d like to compute how much sales tax we’re paying for some of our purchases.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75\n\nboba_tax <- boba * sales_tax\nbooks_tax <- books * sales_tax\nfood_tax <- food * sales_tax\n\nsum(boba_tax, books_tax, food_tax)\n\n[1] 8.840625\n\n\n\n\nVery cumbersome…"
  },
  {
    "objectID": "lab02.html#tedius-and-error-prone",
    "href": "lab02.html#tedius-and-error-prone",
    "title": "Lab 02: Vectors, Types",
    "section": "Tedius and Error Prone",
    "text": "Tedius and Error Prone\nWe computed the tax purchase by purchase…\n\n\nBoba Cost\n\n\n*\n\n\nTax Rate\n\n\n=\n\n\nTaxes\n\n\n\n\nBook Cost\n\n\n*\n\n\nTax Rate\n\n\n=\n\n\nTaxes\n\n\n\n\nFood Cost\n\n\n*\n\n\nTax Rate\n\n\n=\n\n\nTaxes"
  },
  {
    "objectID": "lab02.html#an-easier-way",
    "href": "lab02.html#an-easier-way",
    "title": "Lab 02: Vectors, Types",
    "section": "An Easier Way?",
    "text": "An Easier Way?\nWe’d like to do it all at once.\n\n\n\nCosts\n\n\n\n\n*\n\n\n\n\nTax Rate\n\n\n\n\n=\n\n\n\n\nTaxes\n\n\n\n\n… where Costs contains all individual purchase costs, and Taxes contains all individual taxes.\n\nFor this, R provides vectors."
  },
  {
    "objectID": "lab02.html#vector",
    "href": "lab02.html#vector",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector",
    "text": "Vector\nA contiguous array of 1 or more objects, where all objects are the same type."
  },
  {
    "objectID": "lab02.html#aside-type",
    "href": "lab02.html#aside-type",
    "title": "Lab 02: Vectors, Types",
    "section": "Aside: Type?",
    "text": "Aside: Type?\nOur values are ultimately bits in our computer. How does our program know how to interpret these bits?\n\n\nBy assigning a type to the value!\n\n\n\nWe may wants the bits to be interpreted as\n\nintegers\nreal numbers\ntext (strings)\nlogical values (true or false?)\n\n… or something else."
  },
  {
    "objectID": "lab02.html#types-rs-responsibility",
    "href": "lab02.html#types-rs-responsibility",
    "title": "Lab 02: Vectors, Types",
    "section": "Types: R’s Responsibility",
    "text": "Types: R’s Responsibility\nTo make sense of the bits…\n\n\nProgramming languages are responsible for keeping track of the types assigned to each variable.\n\n\n\nSome languages1 are statically typed, which means types are explicit and unchanging (usually).\nAn Example: C++\n\nint x = 3;\nint y = 7;\ndouble z = 0.4;\nstd::string school = \"UC Berkeley\";\nx = \"Berkeley High School\" # ERROR, type changed!\n\n\nC and Java are two other commonly used statically typed languages."
  },
  {
    "objectID": "lab02.html#r-dynamically-typed",
    "href": "lab02.html#r-dynamically-typed",
    "title": "Lab 02: Vectors, Types",
    "section": "R: Dynamically Typed",
    "text": "R: Dynamically Typed\nR is dynamically typed, which means we’re free to modify the type of a variable.\n\nx <- \"Is\"\nx <- 7 \nx <- \"my favorite number?\" \nx <- TRUE\n\n\nNote that R infers the variable’s type for us (in C and Java we’d need to write int x = 71).\n\nModern C++ supports type inference when the auto keyword is used."
  },
  {
    "objectID": "lab02.html#rs-not-so-many-types",
    "href": "lab02.html#rs-not-so-many-types",
    "title": "Lab 02: Vectors, Types",
    "section": "R’s Not-So-Many Types",
    "text": "R’s Not-So-Many Types\nR only has a few types you should be aware of for this class.\n\n\nLogical: TRUE/T or FALSE/F\nInteger: Whole numbers (e.g., 7L, -5L, 0L)1\nDouble: Fractional numbers (e.g., 5.4, -8.3211, 8.0)\nCharacter: Strings (e.g., \"Hello, World!\", \"X\")\n\n\nR will interpret numbers as doubles by default. Append L to the end of a number if you want R to interpret it as an integer."
  },
  {
    "objectID": "lab02.html#querying-type",
    "href": "lab02.html#querying-type",
    "title": "Lab 02: Vectors, Types",
    "section": "Querying Type",
    "text": "Querying Type\nUse the function typeof to get the type of a variable or literal1.\n\n\ntypeof(\"It was you who killed him!\")\n\n[1] \"character\"\n\n\n\n\n\ntypeof(3L)\n\n[1] \"integer\"\n\n\n\n\n\nnoooo <- \"No. I am your father.\"\ntypeof(noooo)\n\n[1] \"character\"\n\n\n\n\n\ntypeof(3.5 + 7L)\n\n[1] \"double\"\n\n\n\nWe call a value we’ve written explicitly in our code a literal."
  },
  {
    "objectID": "lab02.html#modifying-type-casting",
    "href": "lab02.html#modifying-type-casting",
    "title": "Lab 02: Vectors, Types",
    "section": "Modifying Type (Casting)",
    "text": "Modifying Type (Casting)\nCasting is the act of modifying the type of a value.\n\nImplicit\nIn certain contexts, R will cast a value to a different type automatically. We call this an implicit cast.\n\nx <- 3L\ny <- x + 0.5 # 3L cast to a double to complete the operation"
  },
  {
    "objectID": "lab02.html#modifying-type-casting-yourself",
    "href": "lab02.html#modifying-type-casting-yourself",
    "title": "Lab 02: Vectors, Types",
    "section": "Modifying Type (Casting) Yourself",
    "text": "Modifying Type (Casting) Yourself\nCasting is the act of modifying the type of a value.\nExplicit\nCasts you ask R to make explicitly are called explicit casts. Use the as.<type> functions for this.\n\nx <- 1\nas.logical(x)\n\n[1] TRUE\n\nx <- 37.39303\nas.character(x)\n\n[1] \"37.39303\"\n\nas.numeric(x >= 30)\n\n[1] 1"
  },
  {
    "objectID": "lab02.html#did-we-modify-x",
    "href": "lab02.html#did-we-modify-x",
    "title": "Lab 02: Vectors, Types",
    "section": "Did we modify x?",
    "text": "Did we modify x?\nas.<type>(x) returns a new value with the specified type.\n\nx <- 1\ntypeof(x)\n\n[1] \"double\"\n\ntypeof(as.logical(x))\n\n[1] \"logical\"\n\ntypeof(x)  # unchanged!\n\n[1] \"double\"\n\n\n\nTo modify x, reassign x.\n\nx <- as.logical(x)\ntypeof(x)\n\n[1] \"logical\""
  },
  {
    "objectID": "lab02.html#vector-creation",
    "href": "lab02.html#vector-creation",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector: Creation",
    "text": "Vector: Creation\nA contiguous array of 1 or more objects, where all objects are the same type.\n\nCreating Vectors\nUse c (short for combine or concatenate) to create a vector.\n\nx <- c(1, 3, 4, 8, 0, 9, 28, 30, 3)  # type: double\ny <- c(\"Cory\", \"Dwinelle\", \"Evans\")  # type: character\nz <- c(TRUE, FALSE, FALSE, FALSE)    # type: logical\nshort_cut <- 10:100                  # a short cut for 10, 11, ..., 100"
  },
  {
    "objectID": "lab02.html#vector-access",
    "href": "lab02.html#vector-access",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector: Access",
    "text": "Vector: Access\nA contiguous array of 1 or more objects, where all objects are the same type.\nAccessing Elements\nUse <vector>[N] to access the \\(Nth\\) element of a vector.\n\nx[1]  # reference: x <- c(1, 3, 4, 8, 0, 9, 28, 30, 3)\n\n[1] 1\n\ny[2]  # reference: y <- c(\"Cory\", \"Dwinelle\", \"Evans\") \n\n[1] \"Dwinelle\"\n\nz[c(1, 3, 4)]  # reference: z <- c(TRUE, FALSE, FALSE, FALSE)\n\n[1]  TRUE FALSE FALSE\n\n\n\n\nR is not 0-indexed like most programming languages."
  },
  {
    "objectID": "lab02.html#vector-operations",
    "href": "lab02.html#vector-operations",
    "title": "Lab 02: Vectors, Types",
    "section": "Vector: Operations",
    "text": "Vector: Operations\nWe can apply operations to vectors directly, causing the operation to be done to all its elements (vectorization).\n\n\nx <- c(1, 2, 4, 8)\nx * 10  # multiply all elements in x by 10, forming a new vector\n\n[1] 10 20 40 80\n\nx + c(1, 2, 3, 4)  # add two vectors together, component wise \n\n[1]  2  4  7 12\n\n\n\n\nR will recycle values (loop to the start) if the vectors used in the operation aren’t of the same size.\n\nc(0, 1, 2, 3) + c(1, 100)\n\n[1]   1 101   3 103"
  },
  {
    "objectID": "lab02.html#taxes-are-due",
    "href": "lab02.html#taxes-are-due",
    "title": "Lab 02: Vectors, Types",
    "section": "Taxes are Due…",
    "text": "Taxes are Due…\nRecall our taxes code.\n\nsales_tax <- 0.1025  # in Berkeley today\nboba <- 7.0\nbooks <- 54.50\nfood <- 24.75\n\nboba_tax <- boba * sales_tax\nbooks_tax <- books * sales_tax\nfood_tax <- food * sales_tax\n\nsum(boba_tax, books_tax, food_tax)\n\n[1] 8.840625"
  },
  {
    "objectID": "lab02.html#taxes-are-due-now-with-vectors",
    "href": "lab02.html#taxes-are-due-now-with-vectors",
    "title": "Lab 02: Vectors, Types",
    "section": "Taxes are Due… Now with Vectors!",
    "text": "Taxes are Due… Now with Vectors!\n\nsales_tax <- 0.1025\npurchases <- c(7.0, 54.50, 24.75)\ntaxes <- purchases * sales_tax\nsum(taxes)\n\n[1] 8.840625\n\n\n\nGreat! But we’ve lost information. What do the values in purchases represent?\n\n\n\npurchases <- c(boba = 7.0, books = 54.50, food = 24.75)\n\nWe can associate a name with each value in a vector.\n\n\n\npurchases\n\n boba books  food \n 7.00 54.50 24.75"
  },
  {
    "objectID": "lab02.html#access-with-names",
    "href": "lab02.html#access-with-names",
    "title": "Lab 02: Vectors, Types",
    "section": "Access with Names",
    "text": "Access with Names\n\npurchases <- c(boba = 7.0, books = 54.50, food = 24.75)\n\nWe can associate a name with each value in a vector.\n\npurchases\n\n boba books  food \n 7.00 54.50 24.75 \n\n\nAccess is possible with names, <vector>[<element-name>].\n\npurchases[\"boba\"]\n\nboba \n   7 \n\npurchases[c(\"books\", \"food\")]\n\nbooks  food \n54.50 24.75"
  },
  {
    "objectID": "lab02.html#on-forming-vectors",
    "href": "lab02.html#on-forming-vectors",
    "title": "Lab 02: Vectors, Types",
    "section": "On Forming Vectors",
    "text": "On Forming Vectors\nThe c function can concatenate vectors (flatten them).\n\nc(c(1, 2, 3), 4, c(5, 6))\n\n[1] 1 2 3 4 5 6\n\n\n\nWant a vector of \\(N\\) identical values? Use rep!\n\nrep(\"->\", 10)\n\n [1] \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\" \"->\"\n\n\n\nrep(c(\"->\", \"<-\"), 5)  # also flattens\n\n [1] \"->\" \"<-\" \"->\" \"<-\" \"->\" \"<-\" \"->\" \"<-\" \"->\" \"<-\"\n\n\n\n\nWant a sequence of values from \\(A\\) to \\(B\\) by increments of \\(I\\)? Use seq!\n\nseq(0, 12, 3)   # from 0 (A) to 12 (B) by increments of 2 (I)\n\n[1]  0  3  6  9 12\n\n\n\n\nReturn to Home Page"
  },
  {
    "objectID": "times.html",
    "href": "times.html",
    "title": "Office Hours/Lab Sections",
    "section": "",
    "text": "Office Hours\n\nThursdays, 10 a.m. to 11 a.m. via Zoom1\nFridays, 11 a.m. to 12 p.m. and 4 p.m. to 6 p.m. in Evans 434\n\n\n\nLab Sections\n\nFridays, 9 a.m. to 10 a.m. and 10 a.m. to 11 a.m. in Evans 342\nFridays, 2 p.m. to 3 p.m. and 3 p.m. to 4 p.m. in Cory 289\n\n\n\n\n\n\nFootnotes\n\n\nYou must be logged into your UC Berkeley associated Zoom account to access the meeting.↩︎"
  }
]