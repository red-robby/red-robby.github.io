---
title: "Lab 05: Handling Files"
format: 
  revealjs:
    footer: "[Return to Home Page](https://red-robby.github.io/)"
    chalkboard: true
editor: visual
---

## Files?

We can use R in isolation... 

. . .

::: {.fragment .fade-right}
- But it's much more convenient if we can **save** our results (data) and **share** them with other applications.
:::

::: {.fragment .fade-right}
- Or use our results (data) from other applications, and manipulate them in R.
:::

::: {.fragment .fade-right}
::: {style="color: blue;"}
For this, we need _files_.
:::
:::

## File Formats

_What is a file?_

. . .

For our purposes, just think of a file as a _blob of saved text_. 

. . .

:::{style="color: blue;"}
Suppose we wanted to represent a complex structure in a file. 
:::

. . .

### An Agreed on _Format_

To do this, we need to agree on some convention (format) of representing the 
structure in plain text.

## File Formats: Table Representation

What if we wanted to represent a table? 

. . .

In markdown:

```
| Some Column | Another Column | Yet Another |
|-------------|----------------|-------------|
|     3       |    "hello"     |    TRUE     |
|     17      |   "goodbye"    |   FALSE     |
```

::: {.fragment .fade-right}
::: {style="color: red;"}
Any issues with this?
:::
:::

## File Formats: A Popular Choice, CSV 

One common format for representing tables is ``.csv`` -- "comma separated values".

. . .

```
name,position,student
Gaston,Professor,FALSE
Jakob,uGSI,TRUE
Joy,Tutor,TRUE
```

. . .

**Each row is represented by a line**, with the values in each column **separated by**
**commas**. 

The first row _optionally_ includes the column names.

## Reading Tables (General)

The general function for importing tables from files is ``read.table()``.

. . .

```
read.table(file, header = FALSE, sep = "", quote = "\"'",
           dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
           row.names, col.names, as.is = !stringsAsFactors,
           na.strings = "NA", colClasses = NA, nrows = -1,
           skip = 0, check.names = TRUE, fill = !blank.lines.skip,
           strip.white = FALSE, blank.lines.skip = TRUE,
           comment.char = "#",
           allowEscapes = FALSE, flush = FALSE,
           stringsAsFactors = FALSE,
           fileEncoding = "", encoding = "unknown", text, skipNul = FALSE)
```

. . .

- ``file``: The file to read from
- ``header``: Does the file have a header for the column names?
- ``sep``: What separates the data (e.g., `','` for `.csv` files)?

## Reading CSV Files

To avoid writing passing ``read.table()`` arguments to correctly parse ``.csv`` files, 
we have a convenience function:

```
read.csv(file, header = TRUE, sep = ",", quote = "\"",
         dec = ".", fill = TRUE, comment.char = "", ...)
```

. . .

And for other common formats:

```
read.csv2(file, header = TRUE, sep = ";", quote = "\"",
          dec = ",", fill = TRUE, comment.char = "", ...)

read.delim(file, header = TRUE, sep = "\t", quote = "\"",
           dec = ".", fill = TRUE, comment.char = "", ...)

read.delim2(file, header = TRUE, sep = "\t", quote = "\"",
            dec = ",", fill = TRUE, comment.char = "", ...)
```

## Making Sense of ``read.table()``

Suppose we have a file ``starwars.csv`` including the following contents.

```
"name","height","mass"
"Luke Skywalker",172,77
"C-3PO",167,75
"R2-D2",96,32
"Darth Vader",202,136
...
```

```{r, echo=TRUE, eval=FALSE}
read.table(
  # What arguments do we pass?
)
```

```{r}
library(dplyr)
sw2 <- starwars[, 1:3]
write.csv(sw2, "starwars.csv", row.names = FALSE)
```

## ``read.table()`` Solution

Suppose we have a file ``starwars.csv`` including the following contents.

```
"name","height","mass"
"Luke Skywalker",172,77
"C-3PO",167,75
"R2-D2",96,32
"Darth Vader",202,136
...
```

```{r, echo=TRUE, eval=FALSE}
read.table(
  file = "starwars.csv",
  header = TRUE,
  sep = ",",
  colClasses = c("character", "double", "double")
)
```

::: {.fragment .fade-right}
::: {style="color: red;"}
What if our values were separated with `';'` instead?
:::
:::

## Writing to Files

We have ``write.table()`` for writing tables to files. 

```
write.table(x, file = "", append = FALSE, quote = TRUE, sep = " ",
            eol = "\n", na = "NA", dec = ".", row.names = TRUE,
            col.names = TRUE, qmethod = c("escape", "double"),
            fileEncoding = "")
```

. . .

And for convenience,

```
write.csv(...)
write.csv2(...)
```

## Saving R Output

If we want to save the output of our program to a file, we use ``sink()``. 

```{r, echo=TRUE, eval=FALSE}
sink("my-output.txt")  # We specify the file to redirect our output to
print("Hello World!")  
3 + 2
sink()                 # After this call, our output will be printed as usual
```

. . .

The output of our program was not printed to the console, but redirected to the 
file ``my-output.txt``, which now contains:

```{txt, echo=TRUE}
[1] "Hello World!"
[1] 5
```
