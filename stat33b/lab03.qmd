---
title: "Lab 03: Matrices, Lists"
format: 
  revealjs:
    footer: "[Return to Home Page](https://red-robby.github.io/)"
    chalkboard: true
editor: visual
---

## Higher Dimensions by Hand!

Vectors gave us the ability to form 1 dimensional data. 

If we desired data in, say, 2 dimensions, we could still use a vector.

```{r, echo=TRUE}
x <- 1:100
rows <- 10
cols <- 10

# Get the item at row i, column j
i <- 7
j <- 5
x[(i - 1) * cols + j] # Don't try this at home!
```
::: {.fragment .fade-right}
::: {style="color: red;"}
Who wants to do that?
:::
:::

## Higher Dimensions, Passed to R

Thankfully, R has a set of functions that make this easy for us. 

```{r, echo=TRUE}
x <- matrix(1:100, nrow = 10, ncol = 10)
x
x[7, 9] # we can specify the row and column, sep. by a comma
```

## Row-Major, Column-Major

The matrix function stores the given vector in _column-major_ order by default. 
Our previous code assumed _row-major_ order. 

. . .

To see what this means, let's turn ``m`` into two matrices, one for each.

```{r, echo=TRUE}
m <- 1:9
```

  ::: columns

::: {.column  width="50%"}

### Row-Major

```{r}
matrix(m, nrow = 3, ncol = 3, byrow = TRUE)
```
:::

::: {.column  width="50%"}
### Column-Major

```{r}
matrix(m, nrow = 3, ncol = 3)
```

:::

:::

::: {.fragment .fade-up}
::: {style="color: blue;"}
So _row-major_ fills in the matrix _by row_, and _column-major_ does so by _column_.
:::
:::

## Specifying Row-Major, Column-Major

As said, the default is _column-major_. 

If you'd prefer _row-major_, call ``matrix`` with ``byrow = TRUE``.

. . .

::: columns

::: {.column  width="50%"}

### Row-Major

```{r, echo=TRUE}
matrix(
  m, 
  nrow = 3, 
  ncol = 3, 
  byrow = TRUE
)
```
:::

::: {.column  width="50%"}
### Column-Major

```{r, echo=TRUE}
matrix(
  m, 
  nrow = 3, 
  ncol = 3
)
```

:::

:::

## Matrix Functions: ``rbind``

``rbind`` combines the _rows_ of the inputs into a new matrix. 

```{r, echo=TRUE}
rbind(1:3, 3:1)
rbind(matrix(1:6, nrow = 3, ncol = 2), c(-100, 100))
rbind(matrix(1:3, nrow = 1, ncol = 3), matrix(9:11, nrow = 1, ncol = 3))
```

## Matrix Functions: ``cbind``

``cbind`` combines the _columns_ of the inputs into a new matrix. 

```{r, echo=TRUE}
cbind(1:3, 3:1)
cbind(matrix(1:6, nrow = 3, ncol = 2), c(0, 50, 100))
cbind(matrix(1:6, nrow = 3, ncol = 2), matrix(6:1, nrow = 3, ncol = 2))
```

## Matrix Functions: ``nrow``, ``ncol``

With vectors, we use ``length`` to obtain the number of objects. Similarly, for matrices:

. . .

To obtain the number of rows, use ``nrow``:

```{r, echo=TRUE}
nrow(matrix(1:20, nrow = 5, ncol = 4))
```
. . .

To obtain the number of columns, use ``ncol``:

```{r, echo=TRUE}
ncol(matrix(1:20, nrow = 5, ncol = 4))
```

## Accessing Elements

Use ``<matrix>[i, j]`` to get the value at the ``i``th row and ``j``th column.

```{r, echo=TRUE}
x[2, 4]
```

. . .

If you want the ``i``th row, use ``<matrix>[i,]``.

```{r, echo=TRUE}
x[2,]
```

. . .

Similarly, if you want the ``j``th column, use ``<matrix>[,j]``.
```{r, echo=TRUE}
x[,4]
```

::: {.fragment .fade-right}
::: {style="color: blue;"}
Note that a vector is returned in each case.
:::
:::

## Lists

Lists allow us to store collection of objects, as with vectors, except _every object_
_need not be the same type_. 

```{r, echo=TRUE}
list(1:7, "Go Bears!", TRUE)
```

. . .

Also, the objects of a list _need not be atomic types_. As you can see, 
the first object above is a vector. We can even have lists of lists.

```{r, echo=TRUE, eval=FALSE}
list(list(1:7, "Go Bears!", TRUE), list(7:1, "!sraeB oG", FALSE))
```


## Lists: Names

We can assign names to the objects. 

```{r, echo=TRUE}
my_list = list(nums = 1:7, str = "Go Bears!", bool = TRUE)
my_list
```

## Lists: Access by Name

Then access the objects by name with the ``$`` operator.

```{r, echo=TRUE}
my_list$nums
my_list$str
my_list$bool
```

## Lists: Access with Square Brackets

As with vectors, we can access a list's objects with indices, logical values, 
or names using square brackets.

::: {.fragment .fade-right}
::: {style="color: blue;"}
Be careful! There are two types of access with lists.
:::
:::

. . .

```{r, echo=TRUE}
person <- list(name = "Franz Liszt", profession = "Pianist", alive = FALSE)
```

. . .

What is the difference between these two?   

```{r, echo=TRUE}
person[1]
person[[1]]
```

## List: Square Brackets, Two Methods?

```{r, echo=TRUE}
person[1]
```

The first (one set of square brackets) returns a _list_ with only the first object.

. . .

```{r, echo=TRUE}
person[[1]]
```

The second (two sets of square brackets) returns the underlying object (a string).

## Lists: Only One!

Note that when using double square brackets ``[[]]``, you can only access one 
object at a time. 

. . .

```{r, echo=TRUE, error=TRUE}
person[[c(1, 2)]]
```

. . .

This isn't an issue with single square brackets.

```{r, echo=TRUE}
person[c(1, 2)]
```

::: {.fragment .fade-up}
::: {style="color: red"}
Can you guess why?
:::
:::