---
title: "Lab 08: Conditionals"
format: 
  revealjs:
    footer: "[Return to Home Page](https://red-robby.github.io/)"
    chalkboard: true
---

## Case by Case

Let's ask a simple question. What can we currently do if we want our code to 
handle different cases? 

::: {style="color: blue;"}
::: {.fragment .fade-right}
For example, suppose we would like to get the season (as a string) given a month.

```{r}
#| echo: true
which_season <- function(month) {
  # What should we write here?
}
```
:::
:::

## Case by Case

Let's ask a simple question. What can we currently do if we want our code to 
handle different cases? 

::: {style="color: blue;"}
For example, suppose we would like to get the season (as a string) given a month.
:::

```{r}
#| echo: true
which_season <- function(month) {
  c(rep("Winter", 2), 
    rep("Spring", 3), 
    rep("Summer", 3), 
    rep("Fall", 3), 
    "Winter")[month]
}
```

We could use a vector. 

:::{.fragment .fade-right}
::: {style="color: red;"}
This is a neat work around, but in more complex cases this won't be possible 
(or practical).
:::
:::

## Fizzing, Buzzing, and FizzBuzzing 

Let's consider another case: the famous FizzBuzz problem.  

. . .

Given a number ``n``, return:

- ``"Fizz"`` if it is _divisible by 3_.
- ``"Buzz"`` if it is _divisible by 5_.
- ``"FizzBuzz"`` if it is _divisible by 3 and 5_. 
- The number ``n`` as a string otherwise. 

```{r}
#| echo: true
fizzbuzz <- function(n) {
  # What should we write here? 
}
```


## Fizzing, Buzzing, and FizzBuzzing 

Here's an idea: 

```{r}
#| echo: true
fizzbuzz <- function(n) {
  c(as.character(n),
    "Fizz",
    "Buzz",
    "FizzBuzz")[((n %% 3 == 0) + (2 * (n %% 5 == 0))) + 1]
}
```

:::{style="color: red;"}
:::{.fragment .fade-right}
Oh my, can you make sense of this? 
:::
:::

## Fizzing, Buzzing, and FizzBuzzing

Maybe this? 

```{r}
#| echo: true
fizzbuzz <- function(n) {
  c("FizzBuzz",
    "Fizz",
    "Buzz",
    as.character(n))[
      c(n %% 3 == 0 && n %% 5 == 0, n %% 3 == 0, n %% 5 == 0, TRUE)
    ][1]
}
```

:::{style="color: red;"}
:::{.fragment .fade-right}
Umm... Are your eyes hurting yet?
:::
:::

## Fizzing, Buzzing, and FizzBuzzing

What about this?

```{r}
#| echo: true
fizzbuzz <- function(n) {
  c("FizzBuzz",
    "Fizz",
    "Buzz",
    as.character(n))[
      c(n %% 3 == 0 && n %% 5 == 0, n %% 3 == 0, n %% 5 == 0, TRUE) |> 
        which() |> 
        min()
      ]
}
```

:::{style="color: red;"}
:::{.fragment .fade-right}
... Isn't that terrible? Can you explain how it works? 
:::
:::

:::{style="color: blue;"}
:::{.fragment .fade-up}
Clearly we need some better tools for handling cases.
:::
:::

## Oh, ``if`` Only! 

Recall that we prefer for our code to be _expressive_. 

::: {.fragment .fade-right}
Our description of ``fizzbuzz`` included **_"IF"_**. Wouldn't it be nice to 
write this directly in our code? 
:::

:::{.fragment .fade-right}
::: {style="color: blue;"}
We can! 

```{r}
#| echo: true
x <- 10
if (x >= 10)
  x <- 5
x
```
:::
:::

## The ``if`` Statement 

The ``if`` statement follows the intuitive structure:

::: {.fragment .fade-right}
::: {.r-fit-text style="color: blue;"}
``if (<logical>) <body>``
:::
:::

. . .

where ``<body>`` is executed **_if_** ``<logical>`` is **_true_**.

:::{.fragment .fade-right}
:::{style="color: red;"}
Note that the _parenthesis are required_[^1].
:::
:::

[^1]: As a comparison to other popular languages, this is unlike Python,
but like C, C++ and Java. 

## The ``if`` statement -- multiline body? 

What if we want to execute multiple lines of code _if_ a condition is 
true?

. . .

```{r}
#| echo: true
do_some_math <- function(ok, a, b) {
  if (ok)
    print("a * 10 is: ", a * 10)
  if (ok)
    print("b * 10 is: ", b * 10)
  if (ok)
    print("a * b is: ", a * b)
}
```

:::{.fragment .fade-right}
:::{style="color: red;"}
Well this seems silly...
:::
:::

:::{.fragment .fade-right}
:::{style="color: blue;"}
To include multiple lines into ``<body>``, we must place them inside
curly brackets: ``{ ... }``.
:::
:::

## The ``if`` statement -- multiline body?

We rewrite ``do_some_math``:

```{r}
#| echo: true
do_some_math <- function(ok, a, b) {
  if (ok) {
    print("a * 10 is: ", a * 10)
    print("b * 10 is: ", b * 10)    
    print("a * b is: ", a * b)    
  }
}
```

## On Curly Brackets

Note that when using curly brackets, the _last expression evaluated_
will be _the value of the curly bracket block_. 

```{r}
#| echo: true
food <- "boba"
lover <- {  # Variables are typically not set like this in R. 
  if (food == "banana")
    "Monkey"
  if (food == "boba")
    "Cal Student"
}
```

What is ``lover``?

. . .

```{r}
#| echo: true
lover
```



## Not This, That!

Maybe we'd like to execute some code _if a condition is true_, and 
execute some other code otherwise. We could write, 

```{r}
#| echo: true
#| eval: false

if (conditional) {
  # body A
}
if (!conditional) {
  # body B
}
```

. . .

But this:

- wastefully evaluates ``conditional`` twice. If the first ``if``
failed, we know ``conditional`` is ``FALSE``.
- is not very expressive. 
- won't work as intended if ``body A`` modifies ``conditional``. 

## The ``if else`` Statement 

Instead, we use the ``if else`` statement:

::: {.fragment .fade-right}
::: {.r-fit-text style="color: blue;"}
``if (<logical>) <body A> else <body B>``
:::
:::

. . .

where,

- ``<body A>`` is executed **_if_** ``<logical>`` is **_true_**. 
- ``<body B>`` is executed **_if_** ``<logical>`` is **_false_**. 

. . .

```{r}
#| echo: true
can_i_drive <- function(age) {
  if (age < 16) 
    "No, you're too young."
  else
    "If you have a license."
}
can_i_drive(21)
```

## The ``else if`` Statement

When we need to account for more cases than just two (true or false), we 
can use an ``else if`` statement:

::: {.fragment .fade-right}
::: {style="color: blue; font-size: 50px"}
``if (<logical 1>)`` ``<body 1>``

``else if (<logical 2>)`` ``<body 2>``
  
``else if (<logical 3>)`` ``<body 3> ...``

``else`` ``<body N>``
:::
:::

. . .

- **_Only one body will be evaluated_**. 
- The initial ``if`` statement **_is required_**, but the final ``else`` **_is not_**. 
- You may include as many ``else if``s as you'd like. 

## A Note on Style

The curly brackets are _optional_ if the body is _one line_.

- Some prefer you _always use curly brackets_.
- Regardless, it is recommended you _use curly brackets for all bodies if at_
_least one uses curly brackets_.

. . .

::: columns 

::: {.column width="50%"}

:::{style="color: red;"}
Don't do this. 
:::

```{r}
#| echo: true
#| eval: false
year <- 2
is_sophomore <- NA
if (year == 2) {
  print("You're a sophomore!")
  is_sophomore <- TRUE
} else
  is_sophomore <- FALSE
```
:::

::: {.column width="50%"}
:::{style="color: blue;"}
Do this instead. 
:::

```{r}
#| echo: true
#| eval: false
year <- 2
is_sophomore <- NA
if (year == 2) {
  print("You're a sophomore!")
  is_sophomore <- TRUE
} else {
  is_sophomore <- FALSE
}
```
:::

:::

## A Note on Style

Note that R requires ``else/else if`` be placed after the closing curly bracket
(``}``).

::: columns

::: {.column width="50%"}

:::{style="color: red;"}
This is _not allowed_. 
:::

```{r}
#| echo: true
#| eval: false
year <- 2
is_sophomore <- NA
if (year == 2) {
  print("You're a sophomore!")
  is_sophomore <- TRUE
} 
else {
  is_sophomore <- FALSE
}
```
:::

::: {.column width="50%"}
:::{style="color: blue;"}
This format _is required_. 
:::

```{r}
#| echo: true
#| eval: false
year <- 2
is_sophomore <- NA
if (year == 2) {
  print("You're a sophomore!")
  is_sophomore <- TRUE
} else {
  is_sophomore <- FALSE
}
```
:::
:::

## Control Flow, Branching

You may see these statement referred to as, 

- **_Control Flow Statements_**. They control which lines of code are evaluated, which are ignored, and the order in which they're evaluated. 
- **_Branching Statements_**. They may cause the program to _"branch"_ to another line
of code (instead of the one immediately after it). 



## Back to ``which_season``

Let's rewrite our ``which_season`` function: 

```{r}
#| echo: true
which_season <- function(month) {
  c(rep("Winter", 2), 
    rep("Spring", 3), 
    rep("Summer", 3), 
    rep("Fall", 3), 
    "Winter")[month]
}
```

## Back to ``which_season``

::: {style="color: blue;"}
Now with control flow statements. 
:::

```{r}
#| echo: true

which_season <- function(month) {
  if (month < 1 || month > 12)
    NA
  else if (month == 12 || month %in% 1:2)
    "Winter"
  else if (month %in% 3:5)
    "Spring"
  else if (month %in% 6:8)
    "Summer"
  else
    "Fall"
}
```

## Back to ``fizzbuzz``

Let's rewrite our ``fizzbuzz`` function: 

```{r}
#| echo: true
fizzbuzz <- function(n) {
  c(as.character(n),
    "Fizz",
    "Buzz",
    "FizzBuzz")[((n %% 3 == 0) + (2 * (n %% 5 == 0))) + 1]
}
```

## Back to ``fizzbuzz``   

::: {style="color: blue;"}
Now with control flow statements. Pick your poison! 
:::

::: {.r-stack}

:::{.fragment}

```{r}
#| echo: true
fizzbuzz <- function(n) {
  # This one is what I prefer. 
  s <- character()
  if (n %% 3 == 0) {
    s <- "Fizz"
  }
  if (n %% 5 == 0) {
    s <- paste0(s, "Buzz")
  }
  if (!length(s)) {
    s <- as.character(n)
  }
  s
}
```

:::

:::{.fragment}

```{r}
#| echo: true
fizzbuzz <- function(n) {
  if (n %% 3 == 0 && n %% 5 == 0) {
    "FizzBuzz"
  }
  else if (n %% 3 == 0) {
    "Fizz"
  }
  else if (n %% 5 == 0) {
    "Buzz"
  }
  else {
    as.character(n)
  }
}
```
:::

:::{.fragment}
```{r}
#| echo: true
fizzbuzz <- function(n) {
  if (n %% 3 == 0) {
    # To avoid redundant computation. 
    if (n %% 5 == 0)
      "FizzBuzz"
    else
      "Fizz"
  } else if (n %% 5 == 0) {
    "Buzz"
  } else {
    as.character(n)
  }
}
```
:::

:::{.fragment}
```{r}
#| echo: true
fizzbuzz <- function(n) {
  # To avoid redundant computation. 
  div_3 <- n %% 3 == 0
  div_5 <- n %% 5 == 0
  if (div_3 && div_5) {
    "FizzBuzz"
  } else if (div_3) {
    "Fizz"
  } else if (div_5) {
    "Buzz"
  } else {
    as.character(n)
  }
}
```
:::

:::

## The Vectorized ``if else``, ``ifelse()``

We can use the function ``ifelse`` to apply the ``if else`` operation to a vector. 
Its function signature is

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
ifelse(test, yes, no)
```

where, 

- ``test`` is a vector of logical values.
- ``yes`` is the value to be placed in the result vector if the corresponding logical 
value is _true_. 
- ``no`` is the value to be placed in the result vector if the corresponding logical 
values is _false_.

## Simple ``ifelse()`` Example

```{r}
#| echo: true
x <- 1:10
ifelse(x %% 2 == 0, "Divisible by 2", "Not divisible by 2")
```
